# -*- coding: utf-8 -*-
"""Reversible Residual Layers

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16SLaRnn81RPszJPyDjN84kiycKaMehBs
"""

#@title Installs and Imports
# pip installs
!pip -qq install git+https://github.com/huggingface/transformers.git
!pip install -qq py3nvml

from transformers import ReformerConfig, BertConfig, PyTorchBenchmark, PyTorchBenchmarkArguments

config_1_layers_bert = BertConfig.from_pretrained("bert-base-uncased", num_hidden_layers=1)
config_4_layers_bert = BertConfig.from_pretrained("bert-base-uncased", num_hidden_layers=4)
config_8_layers_bert = BertConfig.from_pretrained("bert-base-uncased", num_hidden_layers=8)
config_12_layers_bert = BertConfig.from_pretrained("bert-base-uncased", num_hidden_layers=12)
benchmark_args = PyTorchBenchmarkArguments(sequence_lengths=[512], batch_sizes=[8], models=["Bert-1-Layers","Bert-4-Layers", "Bert-8-Layers", "Bert-12-Layers"], training=True, inference=False, speed=False, env_print=False)
benchmark = PyTorchBenchmark(configs=[config_1_layers_bert,config_4_layers_bert, config_8_layers_bert, config_12_layers_bert], args=benchmark_args)
result = benchmark.run()

config_1_layers_reformer = ReformerConfig.from_pretrained("google/reformer-enwik8", num_hidden_layers=1, num_hashes=1)
config_4_layers_reformer = ReformerConfig.from_pretrained("google/reformer-enwik8", num_hidden_layers=4, num_hashes=1)
config_8_layers_reformer = ReformerConfig.from_pretrained("google/reformer-enwik8", num_hidden_layers=8, num_hashes=1)
config_12_layers_reformer = ReformerConfig.from_pretrained("google/reformer-enwik8", num_hidden_layers=12, num_hashes=1)
benchmark_args = PyTorchBenchmarkArguments(sequence_lengths=[512], batch_sizes=[8], models=["Reformer-1-Layers", "Reformer-4-Layers", "Reformer-8-Layers", "Reformer-12-Layers"], training=True, inference=False, speed=False, env_print=False)
benchmark = PyTorchBenchmark(configs=[config_1_layers_reformer, config_4_layers_reformer, config_8_layers_reformer, config_12_layers_reformer], args=benchmark_args)
result = benchmark.run()